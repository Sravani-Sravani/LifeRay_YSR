/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.keyPeopleService.model.impl;

import com.keyPeopleService.model.Designation;
import com.keyPeopleService.model.DesignationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Designation service. Represents a row in the &quot;apgovt_designation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DesignationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DesignationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DesignationImpl
 * @generated
 */
public class DesignationModelImpl
	extends BaseModelImpl<Designation> implements DesignationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a designation model instance should use the <code>Designation</code> interface instead.
	 */
	public static final String TABLE_NAME = "apgovt_designation";

	public static final Object[][] TABLE_COLUMNS = {
		{"did", Types.BIGINT}, {"wid", Types.BIGINT}, {"dname", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"dorder", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("did", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("wid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dorder", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table apgovt_designation (did LONG not null primary key,wid LONG,dname VARCHAR(75) null,status VARCHAR(75) null,dorder INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table apgovt_designation";

	public static final String ORDER_BY_JPQL = " ORDER BY designation.did ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY apgovt_designation.did ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DesignationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _did;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _did;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Designation.class;
	}

	@Override
	public String getModelClassName() {
		return Designation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Designation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Designation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Designation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Designation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Designation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Designation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Designation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Designation.class.getClassLoader(), Designation.class,
			ModelWrapper.class);

		try {
			Constructor<Designation> constructor =
				(Constructor<Designation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Designation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Designation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Designation, Object>>();
		Map<String, BiConsumer<Designation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Designation, ?>>();

		attributeGetterFunctions.put("did", Designation::getDid);
		attributeSetterBiConsumers.put(
			"did", (BiConsumer<Designation, Long>)Designation::setDid);
		attributeGetterFunctions.put("wid", Designation::getWid);
		attributeSetterBiConsumers.put(
			"wid", (BiConsumer<Designation, Long>)Designation::setWid);
		attributeGetterFunctions.put("dname", Designation::getDname);
		attributeSetterBiConsumers.put(
			"dname", (BiConsumer<Designation, String>)Designation::setDname);
		attributeGetterFunctions.put("status", Designation::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Designation, String>)Designation::setStatus);
		attributeGetterFunctions.put("dorder", Designation::getDorder);
		attributeSetterBiConsumers.put(
			"dorder", (BiConsumer<Designation, Integer>)Designation::setDorder);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDid() {
		return _did;
	}

	@Override
	public void setDid(long did) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_did = did;
	}

	@Override
	public long getWid() {
		return _wid;
	}

	@Override
	public void setWid(long wid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wid = wid;
	}

	@Override
	public String getDname() {
		if (_dname == null) {
			return "";
		}
		else {
			return _dname;
		}
	}

	@Override
	public void setDname(String dname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dname = dname;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public int getDorder() {
		return _dorder;
	}

	@Override
	public void setDorder(int dorder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dorder = dorder;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Designation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Designation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Designation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DesignationImpl designationImpl = new DesignationImpl();

		designationImpl.setDid(getDid());
		designationImpl.setWid(getWid());
		designationImpl.setDname(getDname());
		designationImpl.setStatus(getStatus());
		designationImpl.setDorder(getDorder());

		designationImpl.resetOriginalValues();

		return designationImpl;
	}

	@Override
	public Designation cloneWithOriginalValues() {
		DesignationImpl designationImpl = new DesignationImpl();

		designationImpl.setDid(this.<Long>getColumnOriginalValue("did"));
		designationImpl.setWid(this.<Long>getColumnOriginalValue("wid"));
		designationImpl.setDname(this.<String>getColumnOriginalValue("dname"));
		designationImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		designationImpl.setDorder(
			this.<Integer>getColumnOriginalValue("dorder"));

		return designationImpl;
	}

	@Override
	public int compareTo(Designation designation) {
		long primaryKey = designation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Designation)) {
			return false;
		}

		Designation designation = (Designation)object;

		long primaryKey = designation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Designation> toCacheModel() {
		DesignationCacheModel designationCacheModel =
			new DesignationCacheModel();

		designationCacheModel.did = getDid();

		designationCacheModel.wid = getWid();

		designationCacheModel.dname = getDname();

		String dname = designationCacheModel.dname;

		if ((dname != null) && (dname.length() == 0)) {
			designationCacheModel.dname = null;
		}

		designationCacheModel.status = getStatus();

		String status = designationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			designationCacheModel.status = null;
		}

		designationCacheModel.dorder = getDorder();

		return designationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Designation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Designation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Designation>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _did;
	private long _wid;
	private String _dname;
	private String _status;
	private int _dorder;

	public <T> T getColumnValue(String columnName) {
		Function<Designation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Designation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("did", _did);
		_columnOriginalValues.put("wid", _wid);
		_columnOriginalValues.put("dname", _dname);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("dorder", _dorder);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("did", 1L);

		columnBitmasks.put("wid", 2L);

		columnBitmasks.put("dname", 4L);

		columnBitmasks.put("status", 8L);

		columnBitmasks.put("dorder", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Designation _escapedModel;

}