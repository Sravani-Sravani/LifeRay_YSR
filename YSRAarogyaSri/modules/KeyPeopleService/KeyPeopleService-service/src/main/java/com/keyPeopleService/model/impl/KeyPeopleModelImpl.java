/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.keyPeopleService.model.impl;

import com.keyPeopleService.model.KeyPeople;
import com.keyPeopleService.model.KeyPeopleModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the KeyPeople service. Represents a row in the &quot;keyPeople&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>KeyPeopleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KeyPeopleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see KeyPeopleImpl
 * @generated
 */
public class KeyPeopleModelImpl
	extends BaseModelImpl<KeyPeople> implements KeyPeopleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a key people model instance should use the <code>KeyPeople</code> interface instead.
	 */
	public static final String TABLE_NAME = "keyPeople";

	public static final Object[][] TABLE_COLUMNS = {
		{"trust_userId", Types.BIGINT}, {"empname", Types.VARCHAR},
		{"phone", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"wingId", Types.BIGINT}, {"designationId", Types.BIGINT},
		{"status", Types.VARCHAR}, {"empOrder", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"createdBy", Types.VARCHAR},
		{"modifyDate", Types.TIMESTAMP}, {"modifyBy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("trust_userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empOrder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table keyPeople (trust_userId LONG not null primary key,empname VARCHAR(75) null,phone VARCHAR(75) null,email VARCHAR(75) null,wingId LONG,designationId LONG,status VARCHAR(75) null,empOrder VARCHAR(75) null,createDate DATE null,createdBy VARCHAR(75) null,modifyDate DATE null,modifyBy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table keyPeople";

	public static final String ORDER_BY_JPQL =
		" ORDER BY keyPeople.empOrder ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY keyPeople.empOrder ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPORDER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public KeyPeopleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trust_userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrust_userId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trust_userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KeyPeople.class;
	}

	@Override
	public String getModelClassName() {
		return KeyPeople.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<KeyPeople, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<KeyPeople, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<KeyPeople, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((KeyPeople)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<KeyPeople, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<KeyPeople, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(KeyPeople)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<KeyPeople, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<KeyPeople, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, KeyPeople>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			KeyPeople.class.getClassLoader(), KeyPeople.class,
			ModelWrapper.class);

		try {
			Constructor<KeyPeople> constructor =
				(Constructor<KeyPeople>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<KeyPeople, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<KeyPeople, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<KeyPeople, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<KeyPeople, Object>>();
		Map<String, BiConsumer<KeyPeople, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<KeyPeople, ?>>();

		attributeGetterFunctions.put(
			"trust_userId", KeyPeople::getTrust_userId);
		attributeSetterBiConsumers.put(
			"trust_userId",
			(BiConsumer<KeyPeople, Long>)KeyPeople::setTrust_userId);
		attributeGetterFunctions.put("empname", KeyPeople::getEmpname);
		attributeSetterBiConsumers.put(
			"empname", (BiConsumer<KeyPeople, String>)KeyPeople::setEmpname);
		attributeGetterFunctions.put("phone", KeyPeople::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<KeyPeople, String>)KeyPeople::setPhone);
		attributeGetterFunctions.put("email", KeyPeople::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<KeyPeople, String>)KeyPeople::setEmail);
		attributeGetterFunctions.put("wingId", KeyPeople::getWingId);
		attributeSetterBiConsumers.put(
			"wingId", (BiConsumer<KeyPeople, Long>)KeyPeople::setWingId);
		attributeGetterFunctions.put(
			"designationId", KeyPeople::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<KeyPeople, Long>)KeyPeople::setDesignationId);
		attributeGetterFunctions.put("status", KeyPeople::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<KeyPeople, String>)KeyPeople::setStatus);
		attributeGetterFunctions.put("empOrder", KeyPeople::getEmpOrder);
		attributeSetterBiConsumers.put(
			"empOrder", (BiConsumer<KeyPeople, String>)KeyPeople::setEmpOrder);
		attributeGetterFunctions.put("createDate", KeyPeople::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<KeyPeople, Date>)KeyPeople::setCreateDate);
		attributeGetterFunctions.put("createdBy", KeyPeople::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<KeyPeople, String>)KeyPeople::setCreatedBy);
		attributeGetterFunctions.put("modifyDate", KeyPeople::getModifyDate);
		attributeSetterBiConsumers.put(
			"modifyDate",
			(BiConsumer<KeyPeople, Date>)KeyPeople::setModifyDate);
		attributeGetterFunctions.put("modifyBy", KeyPeople::getModifyBy);
		attributeSetterBiConsumers.put(
			"modifyBy", (BiConsumer<KeyPeople, String>)KeyPeople::setModifyBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTrust_userId() {
		return _trust_userId;
	}

	@Override
	public void setTrust_userId(long trust_userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trust_userId = trust_userId;
	}

	@Override
	public String getEmpname() {
		if (_empname == null) {
			return "";
		}
		else {
			return _empname;
		}
	}

	@Override
	public void setEmpname(String empname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empname = empname;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@Override
	public long getWingId() {
		return _wingId;
	}

	@Override
	public void setWingId(long wingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wingId = wingId;
	}

	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getEmpOrder() {
		if (_empOrder == null) {
			return "";
		}
		else {
			return _empOrder;
		}
	}

	@Override
	public void setEmpOrder(String empOrder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empOrder = empOrder;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifyDate = modifyDate;
	}

	@Override
	public String getModifyBy() {
		if (_modifyBy == null) {
			return "";
		}
		else {
			return _modifyBy;
		}
	}

	@Override
	public void setModifyBy(String modifyBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifyBy = modifyBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, KeyPeople.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KeyPeople toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, KeyPeople>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KeyPeopleImpl keyPeopleImpl = new KeyPeopleImpl();

		keyPeopleImpl.setTrust_userId(getTrust_userId());
		keyPeopleImpl.setEmpname(getEmpname());
		keyPeopleImpl.setPhone(getPhone());
		keyPeopleImpl.setEmail(getEmail());
		keyPeopleImpl.setWingId(getWingId());
		keyPeopleImpl.setDesignationId(getDesignationId());
		keyPeopleImpl.setStatus(getStatus());
		keyPeopleImpl.setEmpOrder(getEmpOrder());
		keyPeopleImpl.setCreateDate(getCreateDate());
		keyPeopleImpl.setCreatedBy(getCreatedBy());
		keyPeopleImpl.setModifyDate(getModifyDate());
		keyPeopleImpl.setModifyBy(getModifyBy());

		keyPeopleImpl.resetOriginalValues();

		return keyPeopleImpl;
	}

	@Override
	public KeyPeople cloneWithOriginalValues() {
		KeyPeopleImpl keyPeopleImpl = new KeyPeopleImpl();

		keyPeopleImpl.setTrust_userId(
			this.<Long>getColumnOriginalValue("trust_userId"));
		keyPeopleImpl.setEmpname(
			this.<String>getColumnOriginalValue("empname"));
		keyPeopleImpl.setPhone(this.<String>getColumnOriginalValue("phone"));
		keyPeopleImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		keyPeopleImpl.setWingId(this.<Long>getColumnOriginalValue("wingId"));
		keyPeopleImpl.setDesignationId(
			this.<Long>getColumnOriginalValue("designationId"));
		keyPeopleImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		keyPeopleImpl.setEmpOrder(
			this.<String>getColumnOriginalValue("empOrder"));
		keyPeopleImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		keyPeopleImpl.setCreatedBy(
			this.<String>getColumnOriginalValue("createdBy"));
		keyPeopleImpl.setModifyDate(
			this.<Date>getColumnOriginalValue("modifyDate"));
		keyPeopleImpl.setModifyBy(
			this.<String>getColumnOriginalValue("modifyBy"));

		return keyPeopleImpl;
	}

	@Override
	public int compareTo(KeyPeople keyPeople) {
		int value = 0;

		value = getEmpOrder().compareTo(keyPeople.getEmpOrder());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof KeyPeople)) {
			return false;
		}

		KeyPeople keyPeople = (KeyPeople)object;

		long primaryKey = keyPeople.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<KeyPeople> toCacheModel() {
		KeyPeopleCacheModel keyPeopleCacheModel = new KeyPeopleCacheModel();

		keyPeopleCacheModel.trust_userId = getTrust_userId();

		keyPeopleCacheModel.empname = getEmpname();

		String empname = keyPeopleCacheModel.empname;

		if ((empname != null) && (empname.length() == 0)) {
			keyPeopleCacheModel.empname = null;
		}

		keyPeopleCacheModel.phone = getPhone();

		String phone = keyPeopleCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			keyPeopleCacheModel.phone = null;
		}

		keyPeopleCacheModel.email = getEmail();

		String email = keyPeopleCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			keyPeopleCacheModel.email = null;
		}

		keyPeopleCacheModel.wingId = getWingId();

		keyPeopleCacheModel.designationId = getDesignationId();

		keyPeopleCacheModel.status = getStatus();

		String status = keyPeopleCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			keyPeopleCacheModel.status = null;
		}

		keyPeopleCacheModel.empOrder = getEmpOrder();

		String empOrder = keyPeopleCacheModel.empOrder;

		if ((empOrder != null) && (empOrder.length() == 0)) {
			keyPeopleCacheModel.empOrder = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			keyPeopleCacheModel.createDate = createDate.getTime();
		}
		else {
			keyPeopleCacheModel.createDate = Long.MIN_VALUE;
		}

		keyPeopleCacheModel.createdBy = getCreatedBy();

		String createdBy = keyPeopleCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			keyPeopleCacheModel.createdBy = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			keyPeopleCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			keyPeopleCacheModel.modifyDate = Long.MIN_VALUE;
		}

		keyPeopleCacheModel.modifyBy = getModifyBy();

		String modifyBy = keyPeopleCacheModel.modifyBy;

		if ((modifyBy != null) && (modifyBy.length() == 0)) {
			keyPeopleCacheModel.modifyBy = null;
		}

		return keyPeopleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<KeyPeople, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<KeyPeople, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<KeyPeople, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((KeyPeople)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<KeyPeople, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<KeyPeople, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<KeyPeople, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((KeyPeople)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, KeyPeople>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _trust_userId;
	private String _empname;
	private String _phone;
	private String _email;
	private long _wingId;
	private long _designationId;
	private String _status;
	private String _empOrder;
	private Date _createDate;
	private String _createdBy;
	private Date _modifyDate;
	private String _modifyBy;

	public <T> T getColumnValue(String columnName) {
		Function<KeyPeople, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((KeyPeople)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("trust_userId", _trust_userId);
		_columnOriginalValues.put("empname", _empname);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("wingId", _wingId);
		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("empOrder", _empOrder);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifyDate", _modifyDate);
		_columnOriginalValues.put("modifyBy", _modifyBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("trust_userId", 1L);

		columnBitmasks.put("empname", 2L);

		columnBitmasks.put("phone", 4L);

		columnBitmasks.put("email", 8L);

		columnBitmasks.put("wingId", 16L);

		columnBitmasks.put("designationId", 32L);

		columnBitmasks.put("status", 64L);

		columnBitmasks.put("empOrder", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("createdBy", 512L);

		columnBitmasks.put("modifyDate", 1024L);

		columnBitmasks.put("modifyBy", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private KeyPeople _escapedModel;

}