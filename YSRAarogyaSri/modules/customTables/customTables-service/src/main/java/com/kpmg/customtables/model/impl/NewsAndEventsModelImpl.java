/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kpmg.customtables.model.impl;

import com.kpmg.customtables.model.NewsAndEvents;
import com.kpmg.customtables.model.NewsAndEventsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NewsAndEvents service. Represents a row in the &quot;apgovt_newsandevents&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NewsAndEventsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsAndEventsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsAndEventsImpl
 * @generated
 */
@JSON(strict = true)
public class NewsAndEventsModelImpl
	extends BaseModelImpl<NewsAndEvents> implements NewsAndEventsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news and events model instance should use the <code>NewsAndEvents</code> interface instead.
	 */
	public static final String TABLE_NAME = "apgovt_newsandevents";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"newsId", Types.BIGINT},
		{"newsdescription", Types.VARCHAR},
		{"ti_newsdescription", Types.VARCHAR}, {"newsDate", Types.TIMESTAMP},
		{"fileEntryId", Types.BIGINT}, {"status", Types.VARCHAR},
		{"createdDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("newsdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ti_newsdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newsDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table apgovt_newsandevents (uuid_ VARCHAR(75) null,newsId LONG not null primary key,newsdescription VARCHAR(75) null,ti_newsdescription VARCHAR(75) null,newsDate DATE null,fileEntryId LONG,status VARCHAR(75) null,createdDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table apgovt_newsandevents";

	public static final String ORDER_BY_JPQL =
		" ORDER BY newsAndEvents.newsDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY apgovt_newsandevents.newsDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NEWSDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NewsAndEventsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NewsAndEvents.class;
	}

	@Override
	public String getModelClassName() {
		return NewsAndEvents.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NewsAndEvents, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NewsAndEvents, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsAndEvents, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NewsAndEvents)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NewsAndEvents, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NewsAndEvents, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NewsAndEvents)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NewsAndEvents, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NewsAndEvents, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, NewsAndEvents>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			NewsAndEvents.class.getClassLoader(), NewsAndEvents.class,
			ModelWrapper.class);

		try {
			Constructor<NewsAndEvents> constructor =
				(Constructor<NewsAndEvents>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<NewsAndEvents, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NewsAndEvents, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NewsAndEvents, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<NewsAndEvents, Object>>();
		Map<String, BiConsumer<NewsAndEvents, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<NewsAndEvents, ?>>();

		attributeGetterFunctions.put("uuid", NewsAndEvents::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<NewsAndEvents, String>)NewsAndEvents::setUuid);
		attributeGetterFunctions.put("newsId", NewsAndEvents::getNewsId);
		attributeSetterBiConsumers.put(
			"newsId",
			(BiConsumer<NewsAndEvents, Long>)NewsAndEvents::setNewsId);
		attributeGetterFunctions.put(
			"newsdescription", NewsAndEvents::getNewsdescription);
		attributeSetterBiConsumers.put(
			"newsdescription",
			(BiConsumer<NewsAndEvents, String>)
				NewsAndEvents::setNewsdescription);
		attributeGetterFunctions.put(
			"ti_newsdescription", NewsAndEvents::getTi_newsdescription);
		attributeSetterBiConsumers.put(
			"ti_newsdescription",
			(BiConsumer<NewsAndEvents, String>)
				NewsAndEvents::setTi_newsdescription);
		attributeGetterFunctions.put("newsDate", NewsAndEvents::getNewsDate);
		attributeSetterBiConsumers.put(
			"newsDate",
			(BiConsumer<NewsAndEvents, Date>)NewsAndEvents::setNewsDate);
		attributeGetterFunctions.put(
			"fileEntryId", NewsAndEvents::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<NewsAndEvents, Long>)NewsAndEvents::setFileEntryId);
		attributeGetterFunctions.put("status", NewsAndEvents::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<NewsAndEvents, String>)NewsAndEvents::setStatus);
		attributeGetterFunctions.put(
			"createdDate", NewsAndEvents::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<NewsAndEvents, Date>)NewsAndEvents::setCreatedDate);
		attributeGetterFunctions.put("createdBy", NewsAndEvents::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<NewsAndEvents, Long>)NewsAndEvents::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", NewsAndEvents::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<NewsAndEvents, Date>)NewsAndEvents::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", NewsAndEvents::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<NewsAndEvents, Long>)NewsAndEvents::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getNewsId() {
		return _newsId;
	}

	@Override
	public void setNewsId(long newsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsId = newsId;
	}

	@JSON
	@Override
	public String getNewsdescription() {
		if (_newsdescription == null) {
			return "";
		}
		else {
			return _newsdescription;
		}
	}

	@Override
	public void setNewsdescription(String newsdescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsdescription = newsdescription;
	}

	@JSON
	@Override
	public String getTi_newsdescription() {
		if (_ti_newsdescription == null) {
			return "";
		}
		else {
			return _ti_newsdescription;
		}
	}

	@Override
	public void setTi_newsdescription(String ti_newsdescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ti_newsdescription = ti_newsdescription;
	}

	@JSON
	@Override
	public Date getNewsDate() {
		return _newsDate;
	}

	@Override
	public void setNewsDate(Date newsDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsDate = newsDate;
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, NewsAndEvents.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewsAndEvents toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NewsAndEvents>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsAndEventsImpl newsAndEventsImpl = new NewsAndEventsImpl();

		newsAndEventsImpl.setUuid(getUuid());
		newsAndEventsImpl.setNewsId(getNewsId());
		newsAndEventsImpl.setNewsdescription(getNewsdescription());
		newsAndEventsImpl.setTi_newsdescription(getTi_newsdescription());
		newsAndEventsImpl.setNewsDate(getNewsDate());
		newsAndEventsImpl.setFileEntryId(getFileEntryId());
		newsAndEventsImpl.setStatus(getStatus());
		newsAndEventsImpl.setCreatedDate(getCreatedDate());
		newsAndEventsImpl.setCreatedBy(getCreatedBy());
		newsAndEventsImpl.setModifiedDate(getModifiedDate());
		newsAndEventsImpl.setModifiedBy(getModifiedBy());

		newsAndEventsImpl.resetOriginalValues();

		return newsAndEventsImpl;
	}

	@Override
	public NewsAndEvents cloneWithOriginalValues() {
		NewsAndEventsImpl newsAndEventsImpl = new NewsAndEventsImpl();

		newsAndEventsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		newsAndEventsImpl.setNewsId(
			this.<Long>getColumnOriginalValue("newsId"));
		newsAndEventsImpl.setNewsdescription(
			this.<String>getColumnOriginalValue("newsdescription"));
		newsAndEventsImpl.setTi_newsdescription(
			this.<String>getColumnOriginalValue("ti_newsdescription"));
		newsAndEventsImpl.setNewsDate(
			this.<Date>getColumnOriginalValue("newsDate"));
		newsAndEventsImpl.setFileEntryId(
			this.<Long>getColumnOriginalValue("fileEntryId"));
		newsAndEventsImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		newsAndEventsImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		newsAndEventsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		newsAndEventsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		newsAndEventsImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));

		return newsAndEventsImpl;
	}

	@Override
	public int compareTo(NewsAndEvents newsAndEvents) {
		int value = 0;

		value = DateUtil.compareTo(getNewsDate(), newsAndEvents.getNewsDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NewsAndEvents)) {
			return false;
		}

		NewsAndEvents newsAndEvents = (NewsAndEvents)object;

		long primaryKey = newsAndEvents.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NewsAndEvents> toCacheModel() {
		NewsAndEventsCacheModel newsAndEventsCacheModel =
			new NewsAndEventsCacheModel();

		newsAndEventsCacheModel.uuid = getUuid();

		String uuid = newsAndEventsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			newsAndEventsCacheModel.uuid = null;
		}

		newsAndEventsCacheModel.newsId = getNewsId();

		newsAndEventsCacheModel.newsdescription = getNewsdescription();

		String newsdescription = newsAndEventsCacheModel.newsdescription;

		if ((newsdescription != null) && (newsdescription.length() == 0)) {
			newsAndEventsCacheModel.newsdescription = null;
		}

		newsAndEventsCacheModel.ti_newsdescription = getTi_newsdescription();

		String ti_newsdescription = newsAndEventsCacheModel.ti_newsdescription;

		if ((ti_newsdescription != null) &&
			(ti_newsdescription.length() == 0)) {

			newsAndEventsCacheModel.ti_newsdescription = null;
		}

		Date newsDate = getNewsDate();

		if (newsDate != null) {
			newsAndEventsCacheModel.newsDate = newsDate.getTime();
		}
		else {
			newsAndEventsCacheModel.newsDate = Long.MIN_VALUE;
		}

		newsAndEventsCacheModel.fileEntryId = getFileEntryId();

		newsAndEventsCacheModel.status = getStatus();

		String status = newsAndEventsCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			newsAndEventsCacheModel.status = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			newsAndEventsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			newsAndEventsCacheModel.createdDate = Long.MIN_VALUE;
		}

		newsAndEventsCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			newsAndEventsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			newsAndEventsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		newsAndEventsCacheModel.modifiedBy = getModifiedBy();

		return newsAndEventsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NewsAndEvents, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NewsAndEvents, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsAndEvents, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NewsAndEvents)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NewsAndEvents, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NewsAndEvents, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsAndEvents, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((NewsAndEvents)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NewsAndEvents>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _newsId;
	private String _newsdescription;
	private String _ti_newsdescription;
	private Date _newsDate;
	private long _fileEntryId;
	private String _status;
	private Date _createdDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NewsAndEvents, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NewsAndEvents)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("newsId", _newsId);
		_columnOriginalValues.put("newsdescription", _newsdescription);
		_columnOriginalValues.put("ti_newsdescription", _ti_newsdescription);
		_columnOriginalValues.put("newsDate", _newsDate);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("newsId", 2L);

		columnBitmasks.put("newsdescription", 4L);

		columnBitmasks.put("ti_newsdescription", 8L);

		columnBitmasks.put("newsDate", 16L);

		columnBitmasks.put("fileEntryId", 32L);

		columnBitmasks.put("status", 64L);

		columnBitmasks.put("createdDate", 128L);

		columnBitmasks.put("createdBy", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		columnBitmasks.put("modifiedBy", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NewsAndEvents _escapedModel;

}