/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kpmg.asrimTables.model.impl;

import com.kpmg.asrimTables.model.AsrimLocations;
import com.kpmg.asrimTables.model.AsrimLocationsModel;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AsrimLocations service. Represents a row in the &quot;asrim_locations&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AsrimLocationsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AsrimLocationsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AsrimLocationsImpl
 * @generated
 */
public class AsrimLocationsModelImpl
	extends BaseModelImpl<AsrimLocations> implements AsrimLocationsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asrim locations model instance should use the <code>AsrimLocations</code> interface instead.
	 */
	public static final String TABLE_NAME = "asrim_locations";

	public static final Object[][] TABLE_COLUMNS = {
		{"LOC_ID", Types.VARCHAR}, {"LOC_NAME", Types.VARCHAR},
		{"LOC_PARNT_ID", Types.VARCHAR}, {"LOC_ORDER", Types.VARCHAR},
		{"LOC_DESC", Types.VARCHAR}, {"LOC_VAL", Types.VARCHAR},
		{"LANG_ID", Types.VARCHAR}, {"CRT_USR", Types.VARCHAR},
		{"CRT_DT", Types.TIMESTAMP}, {"LST_UPD_USR", Types.VARCHAR},
		{"LST_UPD_DT", Types.TIMESTAMP}, {"LOC_HDR_ID", Types.VARCHAR},
		{"ACTIVE_YN", Types.VARCHAR}, {"ITDA", Types.VARCHAR},
		{"ITDA_AREA", Types.VARCHAR}, {"URBAN_RURAL", Types.VARCHAR},
		{"PINCODE", Types.VARCHAR}, {"IS_CRDA_LOCATION", Types.VARCHAR},
		{"EHS_LOCATION_ID", Types.VARCHAR}, {"RURAL_URBAN", Types.VARCHAR},
		{"LOC_DESC_TEL", Types.VARCHAR}, {"LOC_STATE_VAL", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("LOC_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_PARNT_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_ORDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_VAL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LANG_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CRT_USR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CRT_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LST_UPD_USR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LST_UPD_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LOC_HDR_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTIVE_YN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITDA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITDA_AREA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("URBAN_RURAL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PINCODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_CRDA_LOCATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EHS_LOCATION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RURAL_URBAN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_DESC_TEL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LOC_STATE_VAL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table asrim_locations (LOC_ID VARCHAR(75) not null primary key,LOC_NAME VARCHAR(75) null,LOC_PARNT_ID VARCHAR(75) null,LOC_ORDER VARCHAR(75) null,LOC_DESC VARCHAR(75) null,LOC_VAL VARCHAR(75) null,LANG_ID VARCHAR(75) null,CRT_USR VARCHAR(75) null,CRT_DT DATE null,LST_UPD_USR VARCHAR(75) null,LST_UPD_DT DATE null,LOC_HDR_ID VARCHAR(75) null,ACTIVE_YN VARCHAR(75) null,ITDA VARCHAR(75) null,ITDA_AREA VARCHAR(75) null,URBAN_RURAL VARCHAR(75) null,PINCODE VARCHAR(75) null,IS_CRDA_LOCATION VARCHAR(75) null,EHS_LOCATION_ID VARCHAR(75) null,RURAL_URBAN VARCHAR(75) null,LOC_DESC_TEL VARCHAR(75) null,LOC_STATE_VAL VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table asrim_locations";

	public static final String ORDER_BY_JPQL =
		" ORDER BY asrimLocations.LOC_ID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY asrim_locations.LOC_ID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOC_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AsrimLocationsModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _LOC_ID;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setLOC_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _LOC_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AsrimLocations.class;
	}

	@Override
	public String getModelClassName() {
		return AsrimLocations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AsrimLocations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AsrimLocations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AsrimLocations, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AsrimLocations)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AsrimLocations, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AsrimLocations, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AsrimLocations)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AsrimLocations, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AsrimLocations, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AsrimLocations>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AsrimLocations.class.getClassLoader(), AsrimLocations.class,
			ModelWrapper.class);

		try {
			Constructor<AsrimLocations> constructor =
				(Constructor<AsrimLocations>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AsrimLocations, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AsrimLocations, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AsrimLocations, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AsrimLocations, Object>>();
		Map<String, BiConsumer<AsrimLocations, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AsrimLocations, ?>>();

		attributeGetterFunctions.put("LOC_ID", AsrimLocations::getLOC_ID);
		attributeSetterBiConsumers.put(
			"LOC_ID",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_ID);
		attributeGetterFunctions.put("LOC_NAME", AsrimLocations::getLOC_NAME);
		attributeSetterBiConsumers.put(
			"LOC_NAME",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_NAME);
		attributeGetterFunctions.put(
			"LOC_PARNT_ID", AsrimLocations::getLOC_PARNT_ID);
		attributeSetterBiConsumers.put(
			"LOC_PARNT_ID",
			(BiConsumer<AsrimLocations, String>)
				AsrimLocations::setLOC_PARNT_ID);
		attributeGetterFunctions.put("LOC_ORDER", AsrimLocations::getLOC_ORDER);
		attributeSetterBiConsumers.put(
			"LOC_ORDER",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_ORDER);
		attributeGetterFunctions.put("LOC_DESC", AsrimLocations::getLOC_DESC);
		attributeSetterBiConsumers.put(
			"LOC_DESC",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_DESC);
		attributeGetterFunctions.put("LOC_VAL", AsrimLocations::getLOC_VAL);
		attributeSetterBiConsumers.put(
			"LOC_VAL",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_VAL);
		attributeGetterFunctions.put("LANG_ID", AsrimLocations::getLANG_ID);
		attributeSetterBiConsumers.put(
			"LANG_ID",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLANG_ID);
		attributeGetterFunctions.put("CRT_USR", AsrimLocations::getCRT_USR);
		attributeSetterBiConsumers.put(
			"CRT_USR",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setCRT_USR);
		attributeGetterFunctions.put("CRT_DT", AsrimLocations::getCRT_DT);
		attributeSetterBiConsumers.put(
			"CRT_DT",
			(BiConsumer<AsrimLocations, Date>)AsrimLocations::setCRT_DT);
		attributeGetterFunctions.put(
			"LST_UPD_USR", AsrimLocations::getLST_UPD_USR);
		attributeSetterBiConsumers.put(
			"LST_UPD_USR",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLST_UPD_USR);
		attributeGetterFunctions.put(
			"LST_UPD_DT", AsrimLocations::getLST_UPD_DT);
		attributeSetterBiConsumers.put(
			"LST_UPD_DT",
			(BiConsumer<AsrimLocations, Date>)AsrimLocations::setLST_UPD_DT);
		attributeGetterFunctions.put(
			"LOC_HDR_ID", AsrimLocations::getLOC_HDR_ID);
		attributeSetterBiConsumers.put(
			"LOC_HDR_ID",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setLOC_HDR_ID);
		attributeGetterFunctions.put("ACTIVE_YN", AsrimLocations::getACTIVE_YN);
		attributeSetterBiConsumers.put(
			"ACTIVE_YN",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setACTIVE_YN);
		attributeGetterFunctions.put("ITDA", AsrimLocations::getITDA);
		attributeSetterBiConsumers.put(
			"ITDA",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setITDA);
		attributeGetterFunctions.put("ITDA_AREA", AsrimLocations::getITDA_AREA);
		attributeSetterBiConsumers.put(
			"ITDA_AREA",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setITDA_AREA);
		attributeGetterFunctions.put(
			"URBAN_RURAL", AsrimLocations::getURBAN_RURAL);
		attributeSetterBiConsumers.put(
			"URBAN_RURAL",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setURBAN_RURAL);
		attributeGetterFunctions.put("PINCODE", AsrimLocations::getPINCODE);
		attributeSetterBiConsumers.put(
			"PINCODE",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setPINCODE);
		attributeGetterFunctions.put(
			"IS_CRDA_LOCATION", AsrimLocations::getIS_CRDA_LOCATION);
		attributeSetterBiConsumers.put(
			"IS_CRDA_LOCATION",
			(BiConsumer<AsrimLocations, String>)
				AsrimLocations::setIS_CRDA_LOCATION);
		attributeGetterFunctions.put(
			"EHS_LOCATION_ID", AsrimLocations::getEHS_LOCATION_ID);
		attributeSetterBiConsumers.put(
			"EHS_LOCATION_ID",
			(BiConsumer<AsrimLocations, String>)
				AsrimLocations::setEHS_LOCATION_ID);
		attributeGetterFunctions.put(
			"RURAL_URBAN", AsrimLocations::getRURAL_URBAN);
		attributeSetterBiConsumers.put(
			"RURAL_URBAN",
			(BiConsumer<AsrimLocations, String>)AsrimLocations::setRURAL_URBAN);
		attributeGetterFunctions.put(
			"LOC_DESC_TEL", AsrimLocations::getLOC_DESC_TEL);
		attributeSetterBiConsumers.put(
			"LOC_DESC_TEL",
			(BiConsumer<AsrimLocations, String>)
				AsrimLocations::setLOC_DESC_TEL);
		attributeGetterFunctions.put(
			"LOC_STATE_VAL", AsrimLocations::getLOC_STATE_VAL);
		attributeSetterBiConsumers.put(
			"LOC_STATE_VAL",
			(BiConsumer<AsrimLocations, String>)
				AsrimLocations::setLOC_STATE_VAL);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getLOC_ID() {
		if (_LOC_ID == null) {
			return "";
		}
		else {
			return _LOC_ID;
		}
	}

	@Override
	public void setLOC_ID(String LOC_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_ID = LOC_ID;
	}

	@Override
	public String getLOC_NAME() {
		if (_LOC_NAME == null) {
			return "";
		}
		else {
			return _LOC_NAME;
		}
	}

	@Override
	public void setLOC_NAME(String LOC_NAME) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_NAME = LOC_NAME;
	}

	@Override
	public String getLOC_PARNT_ID() {
		if (_LOC_PARNT_ID == null) {
			return "";
		}
		else {
			return _LOC_PARNT_ID;
		}
	}

	@Override
	public void setLOC_PARNT_ID(String LOC_PARNT_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_PARNT_ID = LOC_PARNT_ID;
	}

	@Override
	public String getLOC_ORDER() {
		if (_LOC_ORDER == null) {
			return "";
		}
		else {
			return _LOC_ORDER;
		}
	}

	@Override
	public void setLOC_ORDER(String LOC_ORDER) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_ORDER = LOC_ORDER;
	}

	@Override
	public String getLOC_DESC() {
		if (_LOC_DESC == null) {
			return "";
		}
		else {
			return _LOC_DESC;
		}
	}

	@Override
	public void setLOC_DESC(String LOC_DESC) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_DESC = LOC_DESC;
	}

	@Override
	public String getLOC_VAL() {
		if (_LOC_VAL == null) {
			return "";
		}
		else {
			return _LOC_VAL;
		}
	}

	@Override
	public void setLOC_VAL(String LOC_VAL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_VAL = LOC_VAL;
	}

	@Override
	public String getLANG_ID() {
		if (_LANG_ID == null) {
			return "";
		}
		else {
			return _LANG_ID;
		}
	}

	@Override
	public void setLANG_ID(String LANG_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LANG_ID = LANG_ID;
	}

	@Override
	public String getCRT_USR() {
		if (_CRT_USR == null) {
			return "";
		}
		else {
			return _CRT_USR;
		}
	}

	@Override
	public void setCRT_USR(String CRT_USR) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CRT_USR = CRT_USR;
	}

	@Override
	public Date getCRT_DT() {
		return _CRT_DT;
	}

	@Override
	public void setCRT_DT(Date CRT_DT) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CRT_DT = CRT_DT;
	}

	@Override
	public String getLST_UPD_USR() {
		if (_LST_UPD_USR == null) {
			return "";
		}
		else {
			return _LST_UPD_USR;
		}
	}

	@Override
	public void setLST_UPD_USR(String LST_UPD_USR) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LST_UPD_USR = LST_UPD_USR;
	}

	@Override
	public Date getLST_UPD_DT() {
		return _LST_UPD_DT;
	}

	@Override
	public void setLST_UPD_DT(Date LST_UPD_DT) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LST_UPD_DT = LST_UPD_DT;
	}

	@Override
	public String getLOC_HDR_ID() {
		if (_LOC_HDR_ID == null) {
			return "";
		}
		else {
			return _LOC_HDR_ID;
		}
	}

	@Override
	public void setLOC_HDR_ID(String LOC_HDR_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_HDR_ID = LOC_HDR_ID;
	}

	@Override
	public String getACTIVE_YN() {
		if (_ACTIVE_YN == null) {
			return "";
		}
		else {
			return _ACTIVE_YN;
		}
	}

	@Override
	public void setACTIVE_YN(String ACTIVE_YN) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTIVE_YN = ACTIVE_YN;
	}

	@Override
	public String getITDA() {
		if (_ITDA == null) {
			return "";
		}
		else {
			return _ITDA;
		}
	}

	@Override
	public void setITDA(String ITDA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ITDA = ITDA;
	}

	@Override
	public String getITDA_AREA() {
		if (_ITDA_AREA == null) {
			return "";
		}
		else {
			return _ITDA_AREA;
		}
	}

	@Override
	public void setITDA_AREA(String ITDA_AREA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ITDA_AREA = ITDA_AREA;
	}

	@Override
	public String getURBAN_RURAL() {
		if (_URBAN_RURAL == null) {
			return "";
		}
		else {
			return _URBAN_RURAL;
		}
	}

	@Override
	public void setURBAN_RURAL(String URBAN_RURAL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_URBAN_RURAL = URBAN_RURAL;
	}

	@Override
	public String getPINCODE() {
		if (_PINCODE == null) {
			return "";
		}
		else {
			return _PINCODE;
		}
	}

	@Override
	public void setPINCODE(String PINCODE) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PINCODE = PINCODE;
	}

	@Override
	public String getIS_CRDA_LOCATION() {
		if (_IS_CRDA_LOCATION == null) {
			return "";
		}
		else {
			return _IS_CRDA_LOCATION;
		}
	}

	@Override
	public void setIS_CRDA_LOCATION(String IS_CRDA_LOCATION) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_IS_CRDA_LOCATION = IS_CRDA_LOCATION;
	}

	@Override
	public String getEHS_LOCATION_ID() {
		if (_EHS_LOCATION_ID == null) {
			return "";
		}
		else {
			return _EHS_LOCATION_ID;
		}
	}

	@Override
	public void setEHS_LOCATION_ID(String EHS_LOCATION_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EHS_LOCATION_ID = EHS_LOCATION_ID;
	}

	@Override
	public String getRURAL_URBAN() {
		if (_RURAL_URBAN == null) {
			return "";
		}
		else {
			return _RURAL_URBAN;
		}
	}

	@Override
	public void setRURAL_URBAN(String RURAL_URBAN) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_RURAL_URBAN = RURAL_URBAN;
	}

	@Override
	public String getLOC_DESC_TEL() {
		if (_LOC_DESC_TEL == null) {
			return "";
		}
		else {
			return _LOC_DESC_TEL;
		}
	}

	@Override
	public void setLOC_DESC_TEL(String LOC_DESC_TEL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_DESC_TEL = LOC_DESC_TEL;
	}

	@Override
	public String getLOC_STATE_VAL() {
		if (_LOC_STATE_VAL == null) {
			return "";
		}
		else {
			return _LOC_STATE_VAL;
		}
	}

	@Override
	public void setLOC_STATE_VAL(String LOC_STATE_VAL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LOC_STATE_VAL = LOC_STATE_VAL;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public AsrimLocations toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AsrimLocations>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AsrimLocationsImpl asrimLocationsImpl = new AsrimLocationsImpl();

		asrimLocationsImpl.setLOC_ID(getLOC_ID());
		asrimLocationsImpl.setLOC_NAME(getLOC_NAME());
		asrimLocationsImpl.setLOC_PARNT_ID(getLOC_PARNT_ID());
		asrimLocationsImpl.setLOC_ORDER(getLOC_ORDER());
		asrimLocationsImpl.setLOC_DESC(getLOC_DESC());
		asrimLocationsImpl.setLOC_VAL(getLOC_VAL());
		asrimLocationsImpl.setLANG_ID(getLANG_ID());
		asrimLocationsImpl.setCRT_USR(getCRT_USR());
		asrimLocationsImpl.setCRT_DT(getCRT_DT());
		asrimLocationsImpl.setLST_UPD_USR(getLST_UPD_USR());
		asrimLocationsImpl.setLST_UPD_DT(getLST_UPD_DT());
		asrimLocationsImpl.setLOC_HDR_ID(getLOC_HDR_ID());
		asrimLocationsImpl.setACTIVE_YN(getACTIVE_YN());
		asrimLocationsImpl.setITDA(getITDA());
		asrimLocationsImpl.setITDA_AREA(getITDA_AREA());
		asrimLocationsImpl.setURBAN_RURAL(getURBAN_RURAL());
		asrimLocationsImpl.setPINCODE(getPINCODE());
		asrimLocationsImpl.setIS_CRDA_LOCATION(getIS_CRDA_LOCATION());
		asrimLocationsImpl.setEHS_LOCATION_ID(getEHS_LOCATION_ID());
		asrimLocationsImpl.setRURAL_URBAN(getRURAL_URBAN());
		asrimLocationsImpl.setLOC_DESC_TEL(getLOC_DESC_TEL());
		asrimLocationsImpl.setLOC_STATE_VAL(getLOC_STATE_VAL());

		asrimLocationsImpl.resetOriginalValues();

		return asrimLocationsImpl;
	}

	@Override
	public AsrimLocations cloneWithOriginalValues() {
		AsrimLocationsImpl asrimLocationsImpl = new AsrimLocationsImpl();

		asrimLocationsImpl.setLOC_ID(
			this.<String>getColumnOriginalValue("LOC_ID"));
		asrimLocationsImpl.setLOC_NAME(
			this.<String>getColumnOriginalValue("LOC_NAME"));
		asrimLocationsImpl.setLOC_PARNT_ID(
			this.<String>getColumnOriginalValue("LOC_PARNT_ID"));
		asrimLocationsImpl.setLOC_ORDER(
			this.<String>getColumnOriginalValue("LOC_ORDER"));
		asrimLocationsImpl.setLOC_DESC(
			this.<String>getColumnOriginalValue("LOC_DESC"));
		asrimLocationsImpl.setLOC_VAL(
			this.<String>getColumnOriginalValue("LOC_VAL"));
		asrimLocationsImpl.setLANG_ID(
			this.<String>getColumnOriginalValue("LANG_ID"));
		asrimLocationsImpl.setCRT_USR(
			this.<String>getColumnOriginalValue("CRT_USR"));
		asrimLocationsImpl.setCRT_DT(
			this.<Date>getColumnOriginalValue("CRT_DT"));
		asrimLocationsImpl.setLST_UPD_USR(
			this.<String>getColumnOriginalValue("LST_UPD_USR"));
		asrimLocationsImpl.setLST_UPD_DT(
			this.<Date>getColumnOriginalValue("LST_UPD_DT"));
		asrimLocationsImpl.setLOC_HDR_ID(
			this.<String>getColumnOriginalValue("LOC_HDR_ID"));
		asrimLocationsImpl.setACTIVE_YN(
			this.<String>getColumnOriginalValue("ACTIVE_YN"));
		asrimLocationsImpl.setITDA(this.<String>getColumnOriginalValue("ITDA"));
		asrimLocationsImpl.setITDA_AREA(
			this.<String>getColumnOriginalValue("ITDA_AREA"));
		asrimLocationsImpl.setURBAN_RURAL(
			this.<String>getColumnOriginalValue("URBAN_RURAL"));
		asrimLocationsImpl.setPINCODE(
			this.<String>getColumnOriginalValue("PINCODE"));
		asrimLocationsImpl.setIS_CRDA_LOCATION(
			this.<String>getColumnOriginalValue("IS_CRDA_LOCATION"));
		asrimLocationsImpl.setEHS_LOCATION_ID(
			this.<String>getColumnOriginalValue("EHS_LOCATION_ID"));
		asrimLocationsImpl.setRURAL_URBAN(
			this.<String>getColumnOriginalValue("RURAL_URBAN"));
		asrimLocationsImpl.setLOC_DESC_TEL(
			this.<String>getColumnOriginalValue("LOC_DESC_TEL"));
		asrimLocationsImpl.setLOC_STATE_VAL(
			this.<String>getColumnOriginalValue("LOC_STATE_VAL"));

		return asrimLocationsImpl;
	}

	@Override
	public int compareTo(AsrimLocations asrimLocations) {
		String primaryKey = asrimLocations.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AsrimLocations)) {
			return false;
		}

		AsrimLocations asrimLocations = (AsrimLocations)object;

		String primaryKey = asrimLocations.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AsrimLocations> toCacheModel() {
		AsrimLocationsCacheModel asrimLocationsCacheModel =
			new AsrimLocationsCacheModel();

		asrimLocationsCacheModel.LOC_ID = getLOC_ID();

		String LOC_ID = asrimLocationsCacheModel.LOC_ID;

		if ((LOC_ID != null) && (LOC_ID.length() == 0)) {
			asrimLocationsCacheModel.LOC_ID = null;
		}

		asrimLocationsCacheModel.LOC_NAME = getLOC_NAME();

		String LOC_NAME = asrimLocationsCacheModel.LOC_NAME;

		if ((LOC_NAME != null) && (LOC_NAME.length() == 0)) {
			asrimLocationsCacheModel.LOC_NAME = null;
		}

		asrimLocationsCacheModel.LOC_PARNT_ID = getLOC_PARNT_ID();

		String LOC_PARNT_ID = asrimLocationsCacheModel.LOC_PARNT_ID;

		if ((LOC_PARNT_ID != null) && (LOC_PARNT_ID.length() == 0)) {
			asrimLocationsCacheModel.LOC_PARNT_ID = null;
		}

		asrimLocationsCacheModel.LOC_ORDER = getLOC_ORDER();

		String LOC_ORDER = asrimLocationsCacheModel.LOC_ORDER;

		if ((LOC_ORDER != null) && (LOC_ORDER.length() == 0)) {
			asrimLocationsCacheModel.LOC_ORDER = null;
		}

		asrimLocationsCacheModel.LOC_DESC = getLOC_DESC();

		String LOC_DESC = asrimLocationsCacheModel.LOC_DESC;

		if ((LOC_DESC != null) && (LOC_DESC.length() == 0)) {
			asrimLocationsCacheModel.LOC_DESC = null;
		}

		asrimLocationsCacheModel.LOC_VAL = getLOC_VAL();

		String LOC_VAL = asrimLocationsCacheModel.LOC_VAL;

		if ((LOC_VAL != null) && (LOC_VAL.length() == 0)) {
			asrimLocationsCacheModel.LOC_VAL = null;
		}

		asrimLocationsCacheModel.LANG_ID = getLANG_ID();

		String LANG_ID = asrimLocationsCacheModel.LANG_ID;

		if ((LANG_ID != null) && (LANG_ID.length() == 0)) {
			asrimLocationsCacheModel.LANG_ID = null;
		}

		asrimLocationsCacheModel.CRT_USR = getCRT_USR();

		String CRT_USR = asrimLocationsCacheModel.CRT_USR;

		if ((CRT_USR != null) && (CRT_USR.length() == 0)) {
			asrimLocationsCacheModel.CRT_USR = null;
		}

		Date CRT_DT = getCRT_DT();

		if (CRT_DT != null) {
			asrimLocationsCacheModel.CRT_DT = CRT_DT.getTime();
		}
		else {
			asrimLocationsCacheModel.CRT_DT = Long.MIN_VALUE;
		}

		asrimLocationsCacheModel.LST_UPD_USR = getLST_UPD_USR();

		String LST_UPD_USR = asrimLocationsCacheModel.LST_UPD_USR;

		if ((LST_UPD_USR != null) && (LST_UPD_USR.length() == 0)) {
			asrimLocationsCacheModel.LST_UPD_USR = null;
		}

		Date LST_UPD_DT = getLST_UPD_DT();

		if (LST_UPD_DT != null) {
			asrimLocationsCacheModel.LST_UPD_DT = LST_UPD_DT.getTime();
		}
		else {
			asrimLocationsCacheModel.LST_UPD_DT = Long.MIN_VALUE;
		}

		asrimLocationsCacheModel.LOC_HDR_ID = getLOC_HDR_ID();

		String LOC_HDR_ID = asrimLocationsCacheModel.LOC_HDR_ID;

		if ((LOC_HDR_ID != null) && (LOC_HDR_ID.length() == 0)) {
			asrimLocationsCacheModel.LOC_HDR_ID = null;
		}

		asrimLocationsCacheModel.ACTIVE_YN = getACTIVE_YN();

		String ACTIVE_YN = asrimLocationsCacheModel.ACTIVE_YN;

		if ((ACTIVE_YN != null) && (ACTIVE_YN.length() == 0)) {
			asrimLocationsCacheModel.ACTIVE_YN = null;
		}

		asrimLocationsCacheModel.ITDA = getITDA();

		String ITDA = asrimLocationsCacheModel.ITDA;

		if ((ITDA != null) && (ITDA.length() == 0)) {
			asrimLocationsCacheModel.ITDA = null;
		}

		asrimLocationsCacheModel.ITDA_AREA = getITDA_AREA();

		String ITDA_AREA = asrimLocationsCacheModel.ITDA_AREA;

		if ((ITDA_AREA != null) && (ITDA_AREA.length() == 0)) {
			asrimLocationsCacheModel.ITDA_AREA = null;
		}

		asrimLocationsCacheModel.URBAN_RURAL = getURBAN_RURAL();

		String URBAN_RURAL = asrimLocationsCacheModel.URBAN_RURAL;

		if ((URBAN_RURAL != null) && (URBAN_RURAL.length() == 0)) {
			asrimLocationsCacheModel.URBAN_RURAL = null;
		}

		asrimLocationsCacheModel.PINCODE = getPINCODE();

		String PINCODE = asrimLocationsCacheModel.PINCODE;

		if ((PINCODE != null) && (PINCODE.length() == 0)) {
			asrimLocationsCacheModel.PINCODE = null;
		}

		asrimLocationsCacheModel.IS_CRDA_LOCATION = getIS_CRDA_LOCATION();

		String IS_CRDA_LOCATION = asrimLocationsCacheModel.IS_CRDA_LOCATION;

		if ((IS_CRDA_LOCATION != null) && (IS_CRDA_LOCATION.length() == 0)) {
			asrimLocationsCacheModel.IS_CRDA_LOCATION = null;
		}

		asrimLocationsCacheModel.EHS_LOCATION_ID = getEHS_LOCATION_ID();

		String EHS_LOCATION_ID = asrimLocationsCacheModel.EHS_LOCATION_ID;

		if ((EHS_LOCATION_ID != null) && (EHS_LOCATION_ID.length() == 0)) {
			asrimLocationsCacheModel.EHS_LOCATION_ID = null;
		}

		asrimLocationsCacheModel.RURAL_URBAN = getRURAL_URBAN();

		String RURAL_URBAN = asrimLocationsCacheModel.RURAL_URBAN;

		if ((RURAL_URBAN != null) && (RURAL_URBAN.length() == 0)) {
			asrimLocationsCacheModel.RURAL_URBAN = null;
		}

		asrimLocationsCacheModel.LOC_DESC_TEL = getLOC_DESC_TEL();

		String LOC_DESC_TEL = asrimLocationsCacheModel.LOC_DESC_TEL;

		if ((LOC_DESC_TEL != null) && (LOC_DESC_TEL.length() == 0)) {
			asrimLocationsCacheModel.LOC_DESC_TEL = null;
		}

		asrimLocationsCacheModel.LOC_STATE_VAL = getLOC_STATE_VAL();

		String LOC_STATE_VAL = asrimLocationsCacheModel.LOC_STATE_VAL;

		if ((LOC_STATE_VAL != null) && (LOC_STATE_VAL.length() == 0)) {
			asrimLocationsCacheModel.LOC_STATE_VAL = null;
		}

		return asrimLocationsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AsrimLocations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AsrimLocations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AsrimLocations, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AsrimLocations)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AsrimLocations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AsrimLocations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AsrimLocations, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AsrimLocations)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AsrimLocations>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _LOC_ID;

	private String _LOC_NAME;

	private String _LOC_PARNT_ID;

	private String _LOC_ORDER;

	private String _LOC_DESC;

	private String _LOC_VAL;

	private String _LANG_ID;

	private String _CRT_USR;

	private Date _CRT_DT;

	private String _LST_UPD_USR;

	private Date _LST_UPD_DT;

	private String _LOC_HDR_ID;

	private String _ACTIVE_YN;

	private String _ITDA;

	private String _ITDA_AREA;

	private String _URBAN_RURAL;

	private String _PINCODE;

	private String _IS_CRDA_LOCATION;

	private String _EHS_LOCATION_ID;

	private String _RURAL_URBAN;

	private String _LOC_DESC_TEL;

	private String _LOC_STATE_VAL;

	public <T> T getColumnValue(String columnName) {
		Function<AsrimLocations, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AsrimLocations)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("LOC_ID", _LOC_ID);
		_columnOriginalValues.put("LOC_NAME", _LOC_NAME);
		_columnOriginalValues.put("LOC_PARNT_ID", _LOC_PARNT_ID);
		_columnOriginalValues.put("LOC_ORDER", _LOC_ORDER);
		_columnOriginalValues.put("LOC_DESC", _LOC_DESC);
		_columnOriginalValues.put("LOC_VAL", _LOC_VAL);
		_columnOriginalValues.put("LANG_ID", _LANG_ID);
		_columnOriginalValues.put("CRT_USR", _CRT_USR);
		_columnOriginalValues.put("CRT_DT", _CRT_DT);
		_columnOriginalValues.put("LST_UPD_USR", _LST_UPD_USR);
		_columnOriginalValues.put("LST_UPD_DT", _LST_UPD_DT);
		_columnOriginalValues.put("LOC_HDR_ID", _LOC_HDR_ID);
		_columnOriginalValues.put("ACTIVE_YN", _ACTIVE_YN);
		_columnOriginalValues.put("ITDA", _ITDA);
		_columnOriginalValues.put("ITDA_AREA", _ITDA_AREA);
		_columnOriginalValues.put("URBAN_RURAL", _URBAN_RURAL);
		_columnOriginalValues.put("PINCODE", _PINCODE);
		_columnOriginalValues.put("IS_CRDA_LOCATION", _IS_CRDA_LOCATION);
		_columnOriginalValues.put("EHS_LOCATION_ID", _EHS_LOCATION_ID);
		_columnOriginalValues.put("RURAL_URBAN", _RURAL_URBAN);
		_columnOriginalValues.put("LOC_DESC_TEL", _LOC_DESC_TEL);
		_columnOriginalValues.put("LOC_STATE_VAL", _LOC_STATE_VAL);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("LOC_ID", 1L);

		columnBitmasks.put("LOC_NAME", 2L);

		columnBitmasks.put("LOC_PARNT_ID", 4L);

		columnBitmasks.put("LOC_ORDER", 8L);

		columnBitmasks.put("LOC_DESC", 16L);

		columnBitmasks.put("LOC_VAL", 32L);

		columnBitmasks.put("LANG_ID", 64L);

		columnBitmasks.put("CRT_USR", 128L);

		columnBitmasks.put("CRT_DT", 256L);

		columnBitmasks.put("LST_UPD_USR", 512L);

		columnBitmasks.put("LST_UPD_DT", 1024L);

		columnBitmasks.put("LOC_HDR_ID", 2048L);

		columnBitmasks.put("ACTIVE_YN", 4096L);

		columnBitmasks.put("ITDA", 8192L);

		columnBitmasks.put("ITDA_AREA", 16384L);

		columnBitmasks.put("URBAN_RURAL", 32768L);

		columnBitmasks.put("PINCODE", 65536L);

		columnBitmasks.put("IS_CRDA_LOCATION", 131072L);

		columnBitmasks.put("EHS_LOCATION_ID", 262144L);

		columnBitmasks.put("RURAL_URBAN", 524288L);

		columnBitmasks.put("LOC_DESC_TEL", 1048576L);

		columnBitmasks.put("LOC_STATE_VAL", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AsrimLocations _escapedModel;

}